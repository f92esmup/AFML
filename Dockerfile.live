# Dockerfile para el modo LIVE/TESTNET de AFML Trading System
# Ejecuta el sistema de trading en producción con conexión a Binance

FROM continuumio/miniconda3:24.1.2-0

# Configurar variables de entorno
ENV CONDA_ENV_NAME=AFML
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PATH=/opt/conda/envs/$CONDA_ENV_NAME/bin:$PATH

# Instalar dependencias del sistema
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    wget \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Configurar directorio de trabajo
WORKDIR /app

# Copiar archivo de configuración del ambiente conda
COPY environment.yml .

# Crear ambiente conda y limpiar cache
RUN conda env create -f environment.yml && \
    conda clean -afy && \
    conda list -n $CONDA_ENV_NAME

# Copiar código fuente del proyecto
COPY . .

# Crear directorios necesarios para outputs y logs
RUN mkdir -p /app/logs /app/registros_produccion

# Configurar PYTHONPATH para imports relativos
ENV PYTHONPATH="/app"

# Activar ambiente conda
RUN echo "conda activate $CONDA_ENV_NAME" >> ~/.bashrc
SHELL ["/bin/bash", "--login", "-c"]

# Punto de entrada para activar conda y ejecutar el script de producción
# Nota: Los argumentos se pasan en tiempo de ejecución
ENTRYPOINT ["conda", "run", "-n", "AFML", "python", "/app/live.py"]

# CMD por defecto - muestra ayuda
CMD ["--help"]

# Metadata
LABEL maintainer="pedro"
LABEL description="AFML Trading System Live/Testnet Container"
LABEL version="1.0"
LABEL mode="production"

# Health check - verifica que el ambiente Python esté funcionando
HEALTHCHECK --interval=60s --timeout=10s --start-period=5s --retries=3 \
    CMD conda run -n $CONDA_ENV_NAME python -c "import asyncio; import binance; import stable_baselines3; print('Container is healthy')" || exit 1
